{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/validation/index.ts"],"names":[],"mappings":";;;;AAAA,wCAAuC;AACvC,0CAAyC;AACzC,0CAAmE;AACnE,0CAAyC;AACzC,yDAAgD;AAEzC,MAAM,UAAU,GAAG,CAAC,QAAiB,EAAW,EAAE,CACvD,OAAO,QAAQ,KAAK,UAAU,CAAC;AADpB,QAAA,UAAU,cACU;AAE1B,MAAM,OAAO,GAAG,CAAC,QAAiB,EAAE,EAAE;IAC3C,IACE,QAAQ,KAAK,IAAI;QACjB,QAAQ,KAAK,SAAS;QACtB,CAAC,OAAO,QAAQ,KAAK,QAAQ,IAAI,KAAK,CAAC,QAAQ,CAAC,CAAC,EACjD,CAAC;QACD,OAAO,IAAI,CAAC;IACd,CAAC;SAAM,IAAI,IAAA,eAAO,EAAC,QAAQ,CAAC,IAAI,IAAA,iBAAQ,EAAC,QAAQ,CAAC,EAAE,CAAC;QACnD,OAAO,CAAC,QAAQ,EAAE,MAAM,CAAC;IAC3B,CAAC;SAAM,IAAI,IAAA,kBAAS,EAAC,QAAQ,CAAC,EAAE,CAAC;QAC/B,OAAO,KAAK,CAAC;IACf,CAAC;SAAM,IAAI,IAAA,iBAAQ,EAAC,QAAQ,CAAC,EAAE,CAAC;QAC9B,OAAO,CACL,IAAA,sBAAa,EAAC,QAAQ,CAAC;YACvB,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,IAAA,eAAO,EAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAC9D,CAAC;IACJ,CAAC;SAAM,IAAI,IAAA,iBAAQ,EAAC,QAAQ,CAAC,IAAI,IAAA,kBAAU,EAAC,QAAQ,CAAC,EAAE,CAAC;QACtD,OAAO,KAAK,CAAC;IACf,CAAC;AACH,CAAC,CAAC;AAnBW,QAAA,OAAO,WAmBlB;AAEK,MAAM,sBAAsB,GAAG,CACpC,QAAiB,EACjB,YAAoB,EACpB,OAAe,EACf,EAAE,CACF,gBAAM,CAAC,KAAK,CACV,CAAC,IAAA,eAAO,EAAC,QAAQ,CAAC,EAClB,IAAI,EACJ,IAAI,uBAAc,CAAC;IACjB,OAAO,EAAE,YAAY,YAAY,OAAO,OAAO,EAAE;IACjD,MAAM,EAAE,QAAQ;CACjB,CAAC,CACH,CAAC;AAZS,QAAA,sBAAsB,0BAY/B;AAEG,MAAM,cAAc,GAAG,CAC5B,QAAiB,EACjB,YAAoB,EACpB,OAAe,EACf,EAAE,CACF,gBAAM,CAAC,KAAK,CACV,IAAA,kBAAU,EAAC,QAAQ,CAAC,EACpB,IAAI,EACJ,IAAI,uBAAc,CAAC;IACjB,OAAO,EAAE,YAAY,YAAY,OAAO,OAAO,EAAE;IACjD,MAAM,EAAE,IAAA,kBAAU,EAAC,QAAQ,CAAC;IAC5B,QAAQ,EAAE,IAAI;CACf,CAAC,CACH,CAAC;AAbS,QAAA,cAAc,kBAavB","sourcesContent":["import { isArray } from '@tsupp/array';\nimport { isNumber } from '@tsupp/number';\nimport { isEmptyObject, isObject, isPromise } from '@tsupp/object';\nimport { isString } from '@tsupp/string';\nimport assert, { AssertionError } from 'assert';\n\nexport const isFunction = (variable: unknown): boolean =>\n  typeof variable === 'function';\n\nexport const isEmpty = (variable: unknown) => {\n  if (\n    variable === null ||\n    variable === undefined ||\n    (typeof variable === 'number' && isNaN(variable))\n  ) {\n    return true;\n  } else if (isArray(variable) || isString(variable)) {\n    return !variable?.length;\n  } else if (isPromise(variable)) {\n    return false;\n  } else if (isObject(variable)) {\n    return (\n      isEmptyObject(variable) ||\n      !Object.keys(variable).some((key) => !isEmpty(variable[key]))\n    );\n  } else if (isNumber(variable) || isFunction(variable)) {\n    return false;\n  }\n};\n\nexport const assertNonEmptyVariable = (\n  variable: unknown,\n  functionName: string,\n  message: string,\n) =>\n  assert.equal(\n    !isEmpty(variable),\n    true,\n    new AssertionError({\n      message: `ERROR - [${functionName}] - ${message}`,\n      actual: variable,\n    }),\n  );\n\nexport const assertFunction = (\n  variable: unknown,\n  functionName: string,\n  message: string,\n) =>\n  assert.equal(\n    isFunction(variable),\n    true,\n    new AssertionError({\n      message: `ERROR - [${functionName}] - ${message}`,\n      actual: isFunction(variable),\n      expected: true,\n    }),\n  );"]}